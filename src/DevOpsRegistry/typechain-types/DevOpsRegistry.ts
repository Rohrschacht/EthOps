/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface DevOpsRegistryInterface extends utils.Interface {
  functions: {
    "applicationContract()": FunctionFragment;
    "createDeploymentProposal(address)": FunctionFragment;
    "createRoleBindingQuorumProposal(uint256)": FunctionFragment;
    "createVersionProposal(bytes20)": FunctionFragment;
    "createVersionQuorumProposal(uint256)": FunctionFragment;
    "deploymentProposalAccepted(address)": FunctionFragment;
    "deploymentProposalRejected(address)": FunctionFragment;
    "mainPipeline()": FunctionFragment;
    "nominateVoter(address)": FunctionFragment;
    "quorumProposalAccepted()": FunctionFragment;
    "quorumProposalRejected()": FunctionFragment;
    "releaseVoter(address)": FunctionFragment;
    "roleBindingProposalAccepted(address)": FunctionFragment;
    "roleBindingProposalRejected(address)": FunctionFragment;
    "triggerDeploymentProposalCheck(address)": FunctionFragment;
    "triggerVersionProposalCheck(bytes20)": FunctionFragment;
    "versionProposalAccepted(bytes20)": FunctionFragment;
    "versionProposalRejected(bytes20)": FunctionFragment;
    "voteDeploymentProposal(address,bool)": FunctionFragment;
    "voteQuorumProposal(bool)": FunctionFragment;
    "voteRoleBindingProposal(address,bool)": FunctionFragment;
    "voteVersionProposal(bytes20,bool)": FunctionFragment;
    "voters(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "applicationContract"
      | "createDeploymentProposal"
      | "createRoleBindingQuorumProposal"
      | "createVersionProposal"
      | "createVersionQuorumProposal"
      | "deploymentProposalAccepted"
      | "deploymentProposalRejected"
      | "mainPipeline"
      | "nominateVoter"
      | "quorumProposalAccepted"
      | "quorumProposalRejected"
      | "releaseVoter"
      | "roleBindingProposalAccepted"
      | "roleBindingProposalRejected"
      | "triggerDeploymentProposalCheck"
      | "triggerVersionProposalCheck"
      | "versionProposalAccepted"
      | "versionProposalRejected"
      | "voteDeploymentProposal"
      | "voteQuorumProposal"
      | "voteRoleBindingProposal"
      | "voteVersionProposal"
      | "voters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "applicationContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createDeploymentProposal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createRoleBindingQuorumProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVersionProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "createVersionQuorumProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentProposalAccepted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deploymentProposalRejected",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mainPipeline",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nominateVoter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumProposalAccepted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumProposalRejected",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseVoter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleBindingProposalAccepted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "roleBindingProposalRejected",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerDeploymentProposalCheck",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "triggerVersionProposalCheck",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "versionProposalAccepted",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "versionProposalRejected",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteDeploymentProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteQuorumProposal",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteRoleBindingProposal",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteVersionProposal",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "voters",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "applicationContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createDeploymentProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createRoleBindingQuorumProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVersionProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createVersionQuorumProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentProposalAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deploymentProposalRejected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mainPipeline",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominateVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumProposalAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumProposalRejected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleBindingProposalAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleBindingProposalRejected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerDeploymentProposalCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggerVersionProposalCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionProposalAccepted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "versionProposalRejected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteDeploymentProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteQuorumProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteRoleBindingProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteVersionProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;

  events: {
    "DeploymentAccepted(address)": EventFragment;
    "DeploymentProposalCreated(address)": EventFragment;
    "DeploymentRejected(address)": EventFragment;
    "DeploymentVoteCast(address,address,bool)": EventFragment;
    "NominateVoter(address)": EventFragment;
    "QuorumAccepted()": EventFragment;
    "QuorumRejected()": EventFragment;
    "QuorumVoteCast(address,bool)": EventFragment;
    "ReleaseVoter(address)": EventFragment;
    "RoleBindingAccepted(address)": EventFragment;
    "RoleBindingQuorumProposalCreated(uint256)": EventFragment;
    "RoleBindingRejected(address)": EventFragment;
    "RoleBindingVoteCast(address,address,bool)": EventFragment;
    "VersionAccepted(bytes20)": EventFragment;
    "VersionProposalCreated(bytes20)": EventFragment;
    "VersionQuorumProposalCreated(uint256)": EventFragment;
    "VersionRejected(bytes20)": EventFragment;
    "VersionVoteCast(address,bytes20,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeploymentAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploymentProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploymentRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeploymentVoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NominateVoter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumVoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseVoter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleBindingAccepted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RoleBindingQuorumProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleBindingRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleBindingVoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionAccepted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionProposalCreated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "VersionQuorumProposalCreated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionVoteCast"): EventFragment;
}

export interface DeploymentAcceptedEventObject {
  subject: string;
}
export type DeploymentAcceptedEvent = TypedEvent<
  [string],
  DeploymentAcceptedEventObject
>;

export type DeploymentAcceptedEventFilter =
  TypedEventFilter<DeploymentAcceptedEvent>;

export interface DeploymentProposalCreatedEventObject {
  proposal: string;
}
export type DeploymentProposalCreatedEvent = TypedEvent<
  [string],
  DeploymentProposalCreatedEventObject
>;

export type DeploymentProposalCreatedEventFilter =
  TypedEventFilter<DeploymentProposalCreatedEvent>;

export interface DeploymentRejectedEventObject {
  subject: string;
}
export type DeploymentRejectedEvent = TypedEvent<
  [string],
  DeploymentRejectedEventObject
>;

export type DeploymentRejectedEventFilter =
  TypedEventFilter<DeploymentRejectedEvent>;

export interface DeploymentVoteCastEventObject {
  voter: string;
  proposal: string;
  accepted: boolean;
}
export type DeploymentVoteCastEvent = TypedEvent<
  [string, string, boolean],
  DeploymentVoteCastEventObject
>;

export type DeploymentVoteCastEventFilter =
  TypedEventFilter<DeploymentVoteCastEvent>;

export interface NominateVoterEventObject {
  nominee: string;
}
export type NominateVoterEvent = TypedEvent<[string], NominateVoterEventObject>;

export type NominateVoterEventFilter = TypedEventFilter<NominateVoterEvent>;

export interface QuorumAcceptedEventObject {}
export type QuorumAcceptedEvent = TypedEvent<[], QuorumAcceptedEventObject>;

export type QuorumAcceptedEventFilter = TypedEventFilter<QuorumAcceptedEvent>;

export interface QuorumRejectedEventObject {}
export type QuorumRejectedEvent = TypedEvent<[], QuorumRejectedEventObject>;

export type QuorumRejectedEventFilter = TypedEventFilter<QuorumRejectedEvent>;

export interface QuorumVoteCastEventObject {
  voter: string;
  accepted: boolean;
}
export type QuorumVoteCastEvent = TypedEvent<
  [string, boolean],
  QuorumVoteCastEventObject
>;

export type QuorumVoteCastEventFilter = TypedEventFilter<QuorumVoteCastEvent>;

export interface ReleaseVoterEventObject {
  releasee: string;
}
export type ReleaseVoterEvent = TypedEvent<[string], ReleaseVoterEventObject>;

export type ReleaseVoterEventFilter = TypedEventFilter<ReleaseVoterEvent>;

export interface RoleBindingAcceptedEventObject {
  subject: string;
}
export type RoleBindingAcceptedEvent = TypedEvent<
  [string],
  RoleBindingAcceptedEventObject
>;

export type RoleBindingAcceptedEventFilter =
  TypedEventFilter<RoleBindingAcceptedEvent>;

export interface RoleBindingQuorumProposalCreatedEventObject {
  newRoleBindingQuorum: BigNumber;
}
export type RoleBindingQuorumProposalCreatedEvent = TypedEvent<
  [BigNumber],
  RoleBindingQuorumProposalCreatedEventObject
>;

export type RoleBindingQuorumProposalCreatedEventFilter =
  TypedEventFilter<RoleBindingQuorumProposalCreatedEvent>;

export interface RoleBindingRejectedEventObject {
  subject: string;
}
export type RoleBindingRejectedEvent = TypedEvent<
  [string],
  RoleBindingRejectedEventObject
>;

export type RoleBindingRejectedEventFilter =
  TypedEventFilter<RoleBindingRejectedEvent>;

export interface RoleBindingVoteCastEventObject {
  voter: string;
  subject: string;
  accepted: boolean;
}
export type RoleBindingVoteCastEvent = TypedEvent<
  [string, string, boolean],
  RoleBindingVoteCastEventObject
>;

export type RoleBindingVoteCastEventFilter =
  TypedEventFilter<RoleBindingVoteCastEvent>;

export interface VersionAcceptedEventObject {
  subject: string;
}
export type VersionAcceptedEvent = TypedEvent<
  [string],
  VersionAcceptedEventObject
>;

export type VersionAcceptedEventFilter = TypedEventFilter<VersionAcceptedEvent>;

export interface VersionProposalCreatedEventObject {
  proposal: string;
}
export type VersionProposalCreatedEvent = TypedEvent<
  [string],
  VersionProposalCreatedEventObject
>;

export type VersionProposalCreatedEventFilter =
  TypedEventFilter<VersionProposalCreatedEvent>;

export interface VersionQuorumProposalCreatedEventObject {
  newVersionQuorum: BigNumber;
}
export type VersionQuorumProposalCreatedEvent = TypedEvent<
  [BigNumber],
  VersionQuorumProposalCreatedEventObject
>;

export type VersionQuorumProposalCreatedEventFilter =
  TypedEventFilter<VersionQuorumProposalCreatedEvent>;

export interface VersionRejectedEventObject {
  subject: string;
}
export type VersionRejectedEvent = TypedEvent<
  [string],
  VersionRejectedEventObject
>;

export type VersionRejectedEventFilter = TypedEventFilter<VersionRejectedEvent>;

export interface VersionVoteCastEventObject {
  voter: string;
  proposal: string;
  accepted: boolean;
}
export type VersionVoteCastEvent = TypedEvent<
  [string, string, boolean],
  VersionVoteCastEventObject
>;

export type VersionVoteCastEventFilter = TypedEventFilter<VersionVoteCastEvent>;

export interface DevOpsRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DevOpsRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    applicationContract(overrides?: CallOverrides): Promise<[string]>;

    createDeploymentProposal(
      newDeployment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createRoleBindingQuorumProposal(
      quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVersionProposal(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createVersionQuorumProposal(
      quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deploymentProposalAccepted(
      newDeployment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    deploymentProposalRejected(
      newDeployment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mainPipeline(overrides?: CallOverrides): Promise<[string]>;

    nominateVoter(
      candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    quorumProposalAccepted(overrides?: CallOverrides): Promise<[boolean]>;

    quorumProposalRejected(overrides?: CallOverrides): Promise<[boolean]>;

    releaseVoter(
      candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleBindingProposalAccepted(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    roleBindingProposalRejected(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    triggerDeploymentProposalCheck(
      newDeployment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    triggerVersionProposalCheck(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    versionProposalAccepted(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    versionProposalRejected(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    voteDeploymentProposal(
      newDeployment: PromiseOrValue<string>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteQuorumProposal(
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteRoleBindingProposal(
      candidate: PromiseOrValue<string>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteVersionProposal(
      name: PromiseOrValue<BytesLike>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  applicationContract(overrides?: CallOverrides): Promise<string>;

  createDeploymentProposal(
    newDeployment: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createRoleBindingQuorumProposal(
    quorum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVersionProposal(
    name: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createVersionQuorumProposal(
    quorum: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deploymentProposalAccepted(
    newDeployment: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  deploymentProposalRejected(
    newDeployment: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mainPipeline(overrides?: CallOverrides): Promise<string>;

  nominateVoter(
    candidate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  quorumProposalAccepted(overrides?: CallOverrides): Promise<boolean>;

  quorumProposalRejected(overrides?: CallOverrides): Promise<boolean>;

  releaseVoter(
    candidate: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleBindingProposalAccepted(
    candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  roleBindingProposalRejected(
    candidate: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  triggerDeploymentProposalCheck(
    newDeployment: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  triggerVersionProposalCheck(
    name: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  versionProposalAccepted(
    name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  versionProposalRejected(
    name: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  voteDeploymentProposal(
    newDeployment: PromiseOrValue<string>,
    accept: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteQuorumProposal(
    accept: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteRoleBindingProposal(
    candidate: PromiseOrValue<string>,
    accept: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteVersionProposal(
    name: PromiseOrValue<BytesLike>,
    accept: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    applicationContract(overrides?: CallOverrides): Promise<string>;

    createDeploymentProposal(
      newDeployment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createRoleBindingQuorumProposal(
      quorum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createVersionProposal(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    createVersionQuorumProposal(
      quorum: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deploymentProposalAccepted(
      newDeployment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deploymentProposalRejected(
      newDeployment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mainPipeline(overrides?: CallOverrides): Promise<string>;

    nominateVoter(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    quorumProposalAccepted(overrides?: CallOverrides): Promise<boolean>;

    quorumProposalRejected(overrides?: CallOverrides): Promise<boolean>;

    releaseVoter(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleBindingProposalAccepted(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    roleBindingProposalRejected(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    triggerDeploymentProposalCheck(
      newDeployment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    triggerVersionProposalCheck(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    versionProposalAccepted(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    versionProposalRejected(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    voteDeploymentProposal(
      newDeployment: PromiseOrValue<string>,
      accept: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteQuorumProposal(
      accept: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteRoleBindingProposal(
      candidate: PromiseOrValue<string>,
      accept: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteVersionProposal(
      name: PromiseOrValue<BytesLike>,
      accept: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "DeploymentAccepted(address)"(
      subject?: null
    ): DeploymentAcceptedEventFilter;
    DeploymentAccepted(subject?: null): DeploymentAcceptedEventFilter;

    "DeploymentProposalCreated(address)"(
      proposal?: null
    ): DeploymentProposalCreatedEventFilter;
    DeploymentProposalCreated(
      proposal?: null
    ): DeploymentProposalCreatedEventFilter;

    "DeploymentRejected(address)"(
      subject?: null
    ): DeploymentRejectedEventFilter;
    DeploymentRejected(subject?: null): DeploymentRejectedEventFilter;

    "DeploymentVoteCast(address,address,bool)"(
      voter?: null,
      proposal?: null,
      accepted?: null
    ): DeploymentVoteCastEventFilter;
    DeploymentVoteCast(
      voter?: null,
      proposal?: null,
      accepted?: null
    ): DeploymentVoteCastEventFilter;

    "NominateVoter(address)"(nominee?: null): NominateVoterEventFilter;
    NominateVoter(nominee?: null): NominateVoterEventFilter;

    "QuorumAccepted()"(): QuorumAcceptedEventFilter;
    QuorumAccepted(): QuorumAcceptedEventFilter;

    "QuorumRejected()"(): QuorumRejectedEventFilter;
    QuorumRejected(): QuorumRejectedEventFilter;

    "QuorumVoteCast(address,bool)"(
      voter?: null,
      accepted?: null
    ): QuorumVoteCastEventFilter;
    QuorumVoteCast(voter?: null, accepted?: null): QuorumVoteCastEventFilter;

    "ReleaseVoter(address)"(releasee?: null): ReleaseVoterEventFilter;
    ReleaseVoter(releasee?: null): ReleaseVoterEventFilter;

    "RoleBindingAccepted(address)"(
      subject?: null
    ): RoleBindingAcceptedEventFilter;
    RoleBindingAccepted(subject?: null): RoleBindingAcceptedEventFilter;

    "RoleBindingQuorumProposalCreated(uint256)"(
      newRoleBindingQuorum?: null
    ): RoleBindingQuorumProposalCreatedEventFilter;
    RoleBindingQuorumProposalCreated(
      newRoleBindingQuorum?: null
    ): RoleBindingQuorumProposalCreatedEventFilter;

    "RoleBindingRejected(address)"(
      subject?: null
    ): RoleBindingRejectedEventFilter;
    RoleBindingRejected(subject?: null): RoleBindingRejectedEventFilter;

    "RoleBindingVoteCast(address,address,bool)"(
      voter?: null,
      subject?: null,
      accepted?: null
    ): RoleBindingVoteCastEventFilter;
    RoleBindingVoteCast(
      voter?: null,
      subject?: null,
      accepted?: null
    ): RoleBindingVoteCastEventFilter;

    "VersionAccepted(bytes20)"(subject?: null): VersionAcceptedEventFilter;
    VersionAccepted(subject?: null): VersionAcceptedEventFilter;

    "VersionProposalCreated(bytes20)"(
      proposal?: null
    ): VersionProposalCreatedEventFilter;
    VersionProposalCreated(proposal?: null): VersionProposalCreatedEventFilter;

    "VersionQuorumProposalCreated(uint256)"(
      newVersionQuorum?: null
    ): VersionQuorumProposalCreatedEventFilter;
    VersionQuorumProposalCreated(
      newVersionQuorum?: null
    ): VersionQuorumProposalCreatedEventFilter;

    "VersionRejected(bytes20)"(subject?: null): VersionRejectedEventFilter;
    VersionRejected(subject?: null): VersionRejectedEventFilter;

    "VersionVoteCast(address,bytes20,bool)"(
      voter?: null,
      proposal?: null,
      accepted?: null
    ): VersionVoteCastEventFilter;
    VersionVoteCast(
      voter?: null,
      proposal?: null,
      accepted?: null
    ): VersionVoteCastEventFilter;
  };

  estimateGas: {
    applicationContract(overrides?: CallOverrides): Promise<BigNumber>;

    createDeploymentProposal(
      newDeployment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createRoleBindingQuorumProposal(
      quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVersionProposal(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createVersionQuorumProposal(
      quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deploymentProposalAccepted(
      newDeployment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deploymentProposalRejected(
      newDeployment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mainPipeline(overrides?: CallOverrides): Promise<BigNumber>;

    nominateVoter(
      candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    quorumProposalAccepted(overrides?: CallOverrides): Promise<BigNumber>;

    quorumProposalRejected(overrides?: CallOverrides): Promise<BigNumber>;

    releaseVoter(
      candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleBindingProposalAccepted(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    roleBindingProposalRejected(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggerDeploymentProposalCheck(
      newDeployment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    triggerVersionProposalCheck(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    versionProposalAccepted(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    versionProposalRejected(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteDeploymentProposal(
      newDeployment: PromiseOrValue<string>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteQuorumProposal(
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteRoleBindingProposal(
      candidate: PromiseOrValue<string>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteVersionProposal(
      name: PromiseOrValue<BytesLike>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applicationContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createDeploymentProposal(
      newDeployment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createRoleBindingQuorumProposal(
      quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVersionProposal(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createVersionQuorumProposal(
      quorum: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deploymentProposalAccepted(
      newDeployment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deploymentProposalRejected(
      newDeployment: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mainPipeline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nominateVoter(
      candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    quorumProposalAccepted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumProposalRejected(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    releaseVoter(
      candidate: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleBindingProposalAccepted(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    roleBindingProposalRejected(
      candidate: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggerDeploymentProposalCheck(
      newDeployment: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    triggerVersionProposalCheck(
      name: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    versionProposalAccepted(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    versionProposalRejected(
      name: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteDeploymentProposal(
      newDeployment: PromiseOrValue<string>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteQuorumProposal(
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteRoleBindingProposal(
      candidate: PromiseOrValue<string>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteVersionProposal(
      name: PromiseOrValue<BytesLike>,
      accept: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
